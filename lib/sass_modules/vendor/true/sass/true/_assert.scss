// Assert
// ======


@mixin assert-true(
  $assert,
  $description: ''
) {
  @include _true-assert-start($description);
  $result: if($assert, pass, fail);

  .assert-true {
    -result: to-upper-case($result);
    -description: $description;

    @if $result == fail {
      @include _true-fail-details(true, $assert);
    }
  }

  @include _true-assert-stop($result);
}


@mixin assert-false(
  $assert,
  $description: ''
) {
  @include _true-assert-start($description);
  $result: if($assert, fail, pass);

  .assert-false {
    -result: to-upper-case($result);
    -description: $description;

    @if $result == fail {
      @include _true-fail-details(false, $assert);
    }
  }

  @include _true-assert-stop($result);
}


@mixin assert-equal(
  $assert,
  $expected,
  $description: ''
) {
  @include _true-assert-start($description);
  $result: if(_true-is-equal($assert, $expected), pass, fail);

  .assert-equal {
    -result: to-upper-case($result);
    -description: $description;

    @if $result == fail {
      @include _true-fail-details($expected, $assert);
    }
  }

  @include _true-assert-stop($result);
}


@mixin assert-unequal(
  $assert,
  $expected,
  $description: ''
) {
  @include _true-assert-start($description);
  $result: if(_true-is-equal($assert, $expected), fail, pass);

  .assert-unequal {
    -result: to-upper-case($result);
    -description: $description;

    @if $result == fail {
      @include _true-fail-details($expected, $assert);
    }
  }

  @include _true-assert-stop($result);
}


// CSS Output Tests
// ----------------

@mixin assert(
  $description
) {
  @include _true-assert-start($description);

  #{_true-selector(assert)} {
    @content;
  }

  @include _true-assert-stop(output-to-css);
}

@mixin input {
  .input {
    @content;
  }
}

@mixin expect {
  .expect {
    @content;
  }
}


// Assert Start
// ------------

@mixin _true-assert-start(
  $name
) {
  @include _true-context(assert, $name);
}

@mixin _true-assert-stop(
  $result
) {
  @include _true-update(test, $result);
  @include _true-context(assert, null);
}


// Details
// -------

@mixin _true-fail-details(
  $expected,
  $returned,
  $terminal: $true-terminal-output
) {
  $expected-type: type-of($expected);
  $returned-type: type-of($returned);

  -expected--#{$expected-type}: _true-inspect($expected);
  -returned--#{$returned-type}: _true-inspect($returned);

  @if $terminal {
    @debug '[FAIL] #{_true-context(test)} » #{_true-context(assert)}';
    @debug 'Expected #{$expected-type} »';
    @debug _true-inspect($expected);
    @debug 'Returned #{$returned-type} »';
    @debug _true-inspect($returned);
  }

  @warn '#{_true-context(test)} » #{_true-context(assert)}';
}
