// Results
// =======

/// Initialized results map
/// @access private
/// @group x_private
/// @type Map
$_true-results-reset: (
  run: 0,
  pass: 0,
  fail: 0,
  output-to-css: 0,
);

/// Results map
/// @access private
/// @group x_private
/// @type Map
/// @require $_true-results-reset
/// @prop {Map} global [$_true-results-reset] - Global results
/// @prop {Map} module [$_true-results-reset] - Results for current module
/// @prop {Map} test [$_true-results-reset] - Results for current test
$_true-results: (
  global: $_true-results-reset,
  module: $_true-results-reset,
  test: $_true-results-reset,
);


// Reset
// -----

/// Reset helper
/// @access private
/// @group x_private
/// @param {String} $scope - Scope to reset
/// @require $_true-results-reset
/// @require $_true-results
@mixin _true-reset(
  $scope
) {
  @if $scope == global {
    $_true-results: (
      global: $_true-results-reset,
      module: $_true-results-reset,
      test: $_true-results-reset,
    ) !global;
  } @else if $scope == module {
    $update: (
      module: $_true-results-reset,
      test: $_true-results-reset,
    );
    $_true-results: map-merge($_true-results, $update) !global;
  } @else if $scope == test {
    $update: (
      test: $_true-results-reset
    );
    $_true-results: map-merge($_true-results, $update) !global;
  } @else {
    @warn "#{$scope} is not a valid scope for _true-reset().";
  }
}


// Get Results
// -----------

/// Results getter
/// @access private
/// @group x_private
/// @param {String} $scope - Scope to get results from
/// @require $_true-results
@function _true-get-results(
  $scope
) {
  @return map-get($_true-results, $scope);
}


// Get Result
// ----------

/// Single result getter
/// @access private
/// @group x_private
/// @param {String} $scope - Scope to get result form
/// @require {function} _true-get-results
@function _true-get-result(
  $scope
) {
  $results: _true-get-results($scope);
  $return: if(map-get($results, output-to-css) > 0, output-to-css, null);

  @if map-get($results, fail) > 0 {
    @return if($return, $return fail, fail);
  } @else if map-get($results, pass) > 0 {
    @return if($return, $return pass, pass);
  } @else {
    @return $return;
  }
}


// Update
// ------

/// Update results
/// @access private
/// @group x_private
/// @param {String} $scope - Scope to update results from
/// @param {List} $results - Results
/// @require {function} _true-get-results
/// @require {function} _true-map-increment
/// @require $_true-results
@mixin _true-update(
  $scope,
  $results
) {
  $current: _true-get-results($scope);
  $update: (run: 1);

  @if $scope == global {
    $update: _true-get-results(module);
  } @else {
    @each $result in $results {
      @if $result {
        $update: map-merge($update, ($result: 1));
      }
    }
  }

  $scope: ($scope: _true-map-increment($current, $update));
  $_true-results: map-merge($_true-results, $scope) !global;
}


// Report Message
// --------------

/// Report message
/// @access private
/// @group x_private
/// @param {String} $scope [test] - Scope
/// @param {String} $lines [single] - Lines
/// @return {String} - Reported message
/// @require {function} _true-get-results
@function _true-report-message(
  $scope: test,
  $lines: single
) {
  $results: _true-get-results($scope);
  $run: map-get($results, run);
  $pass: map-get($results, pass);
  $fail: map-get($results, fail);
  $output-to-css: map-get($results, output-to-css);

  $items: null;
  $message: null;

  @if $scope == global or $scope == module {
    $items: Tests;
  } @else if $scope == test {
    $items: Assertions;
  }

  @if $lines == single {
    $message: '#{$run} #{$items}, #{$pass} Passed, #{$fail} Failed';
    $message: if($output-to-css > 0, $message + ', #{$output-to-css} Output to CSS', $message);
  } @else {
    $message: '#{$run $items}:#{$-tnl} - #{$pass} Passed#{$-tnl} - #{$fail} Failed';
    $message: if($output-to-css > 0, $message + '#{$-tnl} - #{$output-to-css} Output to CSS', $message);
  }

  @return $message;
}


// Report
// ------

/// Report results summary to CSS and/or command line
/// @access public
/// @group reporting
/// @param {Bool} $terminal [$true-terminal-output] - Whether or not to use terminal output
/// @require {function} _true-report-message
/// @require {function} _true-message
@mixin report(
  $terminal: $true-terminal-output
) {
  $message: _true-report-message(global, multiple);
  @include _true-message('# SUMMARY ----------', comments);
  @include _true-message($message, comments);
  @include _true-message('--------------------', comments);

  @if $terminal {
    $message: _true-report-message(global, single);
    @include _true-message($message, debug);
  }
}
